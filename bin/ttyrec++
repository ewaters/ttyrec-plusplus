#!/usr/bin/env perl

# Much of this code comes from http://poe.perl.org/?POE_Cookbook/Child_Processes

use warnings;
use strict;
use Time::HiRes qw(gettimeofday tv_interval);
use JSON::XS;
use Encode qw(encode decode);
use Data::Dumper;
use POSIX;
use POE qw(Wheel::ReadWrite Wheel::Run_ttyrec Filter::Stream);
use Getopt::Long;
use FindBin;
use utf8;

## Configuration

my %opt = (
	out_file    => "$FindBin::Bin/../logs/ttyrec.$$.json",
	window_size => undef,
	command     => $ENV{SHELL},
	debug       => 0,
);

GetOptions(
	'out=s'     => \$opt{out_file},
	'command=s' => \$opt{command},
	'debug'     => \$opt{debug},
);

if (@ARGV) {
	$opt{command} = \@ARGV;
}
if (! $opt{window_size}) {
	my ($rows, $cols) = `/bin/stty size` =~ m{^(\d+) \s+ (\d+)}x;
	$opt{window_size} = [ $rows * 1, $cols * 1, 1024, 768 ];
}

## Setup

my $json_xs = JSON::XS->new->ascii->pretty;
my $start_time;
my $last_time;
my @frames;
my $debug_log;
if ($opt{debug}) {
	open $debug_log, '>', 'debug.log' or die "$!";
}

### Start a session to encapsulate the previous features.

POE::Session->create(
	inline_states => {
		_start             => \&handle_start,
		_stop              => \&handle_stop,
		got_terminal_stdin => \&handle_terminal_stdin,
		got_child_stdout   => \&handle_child_stdout,
		got_sigchld        => \&handle_sigchld,
		got_sigwinch       => \&handle_sigwinch,
	},
);

$poe_kernel->run();

exit 0;

sub record_input {
	push_frames('in', @_);
}

sub record_output {
	push_frames('out', @_);
}

sub push_frames {
	my ($from, $text) = @_;

	if ($from eq 'out') {
		$text = decode('utf8', $text);
		# This feels very hacky.  `typescript` captures '\r\n' as a line ending where as
		# we only receive '\n'.  Not sure what's going on.
		$text =~ s{(?<!\r)\n}{\r\n}g;
		
		print $debug_log $text if $opt{debug};
	}
	else {
		# input may not be text; could be a data structure
	}

	my $ms_since_last = 0;
	if ($last_time) {
		my $seconds_since_last = tv_interval($last_time, [gettimeofday]);
		$ms_since_last = sprintf('%d', $seconds_since_last * 1000) * 1;
	}
	$last_time = [gettimeofday];

	# If no time elapsed since the last frame and the last frame in the stack is 'out',
	# concatenate the contents of this text onto the previous frame
	if (@frames && $ms_since_last == 0 && $frames[-1][0] eq $from && $from eq 'out') {
		$frames[-1][2] .= $text;
	}
	else {
		push @frames, [ $from, $ms_since_last, $text ];
	}
}

sub record_file {
	my %json = (
		start_time  => $start_time,
		end_time    => scalar gettimeofday,
		term_rows   => $opt{window_size}[0],
		term_cols   => $opt{window_size}[1],
		command     => $opt{command},
		frames      => \@frames,
	);

	print "Creating log $opt{out_file}\n";
	open my $log, '>', $opt{out_file} or die "Failed to open $opt{out_file} for writing: $!";
	print $log $json_xs->encode(\%json);
	close $log;
}

### Handle the _start event.  This sets things in motion.

sub handle_start {
	my ($kernel, $heap) = @_[KERNEL, HEAP];

	# Set a signal handler.
	$kernel->sig(CHLD => "got_sigchld");
	$kernel->sig(WINCH => "got_sigwinch");

	# Save the original terminal settings so they can be restored later.
	$heap->{stdin_tio} = POSIX::Termios->new();
	$heap->{stdin_tio}->getattr(0);
	$heap->{stdout_tio} = POSIX::Termios->new();
	$heap->{stdout_tio}->getattr(1);
	$heap->{stderr_tio} = POSIX::Termios->new();
	$heap->{stderr_tio}->getattr(2);

	# Start the terminal reader/writer.

	$heap->{stdio} = POE::Wheel::ReadWrite->new(
		InputHandle  => \*STDIN,
		OutputHandle => \*STDOUT,
		InputEvent   => "got_terminal_stdin",
		Filter       => POE::Filter::Stream->new(),
	);

	# Start the asynchronous child process.

	$heap->{program} = POE::Wheel::Run_ttyrec->new(
		Program     => $opt{command},
		Conduit     => "pty",
		Winsize     => $opt{window_size},
		StdoutEvent => "got_child_stdout",
		StdioFilter => POE::Filter::Stream->new(),
	);

	# Put the terminal into raw input mode.  Otherwise discrete
	# keystrokes will not be read immediately.

	{
		my $tio = POSIX::Termios->new();
		$tio->getattr(0);

		my $lflag = $tio->getlflag;
		$lflag &= ~(ECHO | ECHOE | ECHOK | ECHONL | ICANON | IEXTEN | ISIG);
		$tio->setlflag($lflag);

		my $iflag = $tio->getiflag;
		$iflag &= ~(BRKINT | INPCK | ISTRIP | IXON);
		$tio->setiflag($iflag);

		my $cflag = $tio->getcflag;
		$cflag &= ~(CSIZE | PARENB);
		$tio->setcflag($cflag);
		$tio->setattr(0, TCSANOW);
	}

	{
		my $tio = POSIX::Termios->new();
		$tio->getattr(1);

		my $lflag = $tio->getlflag;
		$lflag &= ~(ECHO | ECHOE | ECHOK | ECHONL | ICANON | IEXTEN | ISIG);
		$tio->setlflag($lflag);

		$tio->setattr(1, TCSANOW);
	}

	$start_time = scalar gettimeofday;
}

### Handle the _stop event.  This restores the original terminal
### settings when we're done.  That's very important.

sub handle_stop {
	my $heap = $_[HEAP];
	$heap->{stdin_tio}->setattr(0, TCSANOW);
	$heap->{stdout_tio}->setattr(1, TCSANOW);
	$heap->{stderr_tio}->setattr(2, TCSANOW);
	record_file();
}

### Handle terminal STDIN.  Send it to the background program's STDIN.

sub handle_terminal_stdin {
	my ($heap, $input) = @_[HEAP, ARG0];
	record_input($input);
	$heap->{program}->put($input);
}

### Handle STDOUT from the child program.  Send it to the terminal's
### STDOUT.

sub handle_child_stdout {
	my ($heap, $input) = @_[HEAP, ARG0];
	record_output($input);
	$heap->{stdio}->put($input);
}

### Handle SIGCHLD.  Shut down if the exiting child process was the
### one we've been managing.

sub handle_sigchld {
	my ($heap, $child_pid) = @_[HEAP, ARG1];
	if ($child_pid == $heap->{program}->PID) {
		delete $heap->{program};
		delete $heap->{stdio};
	}
	return 0;
}

sub handle_sigwinch {
	print "Window was resized! Not yet supported\n";
	# TODO: Pass window size onto child
}
